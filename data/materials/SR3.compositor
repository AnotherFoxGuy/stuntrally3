//  start of  Editor only

//  üèóÔ∏è ed rtt 0  for roadDensity.png
//------------------------------------------------------------------------------------
compositor_node Rtt_RoadDens
{
	in 0 rt_output

	target rt_output
	{
		pass render_scene
		{
			profiling_id "RTT 0 road dens"
			identifier	11100

			load
			{
				all				clear
				clear_colour	1 0 0 1  // red
			}
			store
			{
				colour	store
				depth	store
				stencil	store
			}
			//  todo: depth only?  add RV_Objects but black,  add smooth outline? ..
			visibility_mask  0x00004020  // RV_EdRoadDens + RV_Objects
			// visibility_mask  0x00004000  // RV_EdRoadDens
			
			rq_first  1  // road, objects
			rq_last	  72

			overlays	off
			enable_forwardplus no
		}
	}
}

//  üèóÔ∏è ed rtt 1  for road.png minimap preview
//------------------------------------------------------------------------------------
compositor_node Rtt_RoadPreview
{
	in 0 rt_output

	target rt_output
	{
		pass render_scene
		{
			profiling_id "RTT 1 road prv"
			identifier	11101

			load
			{
				all				clear
				clear_colour	0 0 0 0  // alpha
			}
			store
			{
				colour	store
				depth	store
				stencil	store
			}
			visibility_mask  0x00008000  // RV_EdRoadPreview
			
			rq_first  70  // road
			rq_last	  72

			overlays	off
			enable_forwardplus no
		}
	}
}

//  üèóÔ∏è ed rtt 2  for terrain.jpg minimap preview
//------------------------------------------------------------------------------------
compositor_node Rtt_Terrain
{
	in 0 rt_output
	// in 1 dynamic_cubemap  // todo..

	texture depthBuffer  target_width target_height PFG_D32_FLOAT
	texture rtt_first    target_width target_height target_format
	texture rtt_refract  target_width target_height target_format
	texture rtt_final    target_width target_height target_format

	rtv rtt_first
	{
		depth_stencil	depthBuffer
	}
	rtv rtt_refract
	{
		depth_stencil	depthBuffer
	}
	rtv rtt_final
	{
		depth_stencil	depthBuffer
	}


	target rtt_first
	{
		//  [Terrain Render]  --------
		pass render_scene
		{
			profiling_id "RTT 2 terrain"
			identifier	11102

			execution_mask			0xff
			viewport_modifier_mask	0xff

			load
			{
				all				clear
				// clear_depth  1.0
				clear_colour	0.2 0.4 0.6 1
			}
			store
			{
				colour	store_or_resolve
				depth	store
				stencil	dont_care
			}

			// expose dynamic_cubemap

			visibility_mask  0x00000024  // RV_Terrain + RV_Objects

			rq_last		20

			overlays	off
			//- shadows		SR3_Shadows  //** ed
			lod_bias	2.0
		}
	}

	target rtt_refract
	{
		pass render_quad
		{
			//  preserve depth buffer
			load {  colour dont_care  }
			material Ogre/Copy/4xFP32
			input 0 rtt_first
		}

		//  water, Pass with refractive objects
		pass render_scene
		{
			load {  all load  }
			store
			{
				colour	store_or_resolve
				depth	dont_care
				stencil	dont_care
			}

			// expose demo_dynamic_cubemap
			identifier	11103

			visibility_mask  0x00000002
			rq_first	210
			rq_last		211

			overlays		on
			use_refractions	depthBuffer rtt_first
		}

	}

	target rt_output
	{
		pass render_quad
		{
			identifier	11105
			load {  colour dont_care  }
			material Ogre/Copy/4xFP32
			input 0 rtt_refract
		}
	}
}


//  üßä 3d preview  other scene
//------------------------------------------------------------------------------------
compositor_node Rtt_PreView3D
{
	in 0 rt_output

	target rt_output
	{
		pass render_scene
		{
			profiling_id "RTT 3d preview"
			identifier	12345

			load
			{
				all				clear
				// clear_colour	0 0 0 0  // black, transparent?
				clear_colour	0.2 0.35 0.45 1  // sky blue
			}
			store
			{
				colour	store
				depth	store
				stencil	store
			}

			visibility_mask  0x000001FF  // all
			rq_first  0
			rq_last	  199  // before RQ_OVERLAY

			overlays	off
			// shadows	SR3_Shadows  // no-
			enable_forwardplus no
		}
	}
}



//  üåí shadows  - HQ, only for ed preview cam
//------------------------------------------------------------------------------------
compositor_node_shadow SR3_Shadows
{
	technique pssm

	//**  shadows par
	// texture atlas 3072 2048 PFG_D32_FLOAT  // medium 2k
	// texture atlas 6144 4096 PFG_D32_FLOAT  // high 4k
	texture atlas 12288 8192 PFG_D32_FLOAT  // ultra high 8k

	num_splits		3
	pssm_lambda		0.95
	shadow_map 0 atlas uv 0.000000000000000 0.0 0.666666666666667 1.0 light 0 split 0
	shadow_map 1 atlas uv 0.666666666666667 0.0 0.333333333333333 0.5 light 0 split 1
	shadow_map 2 atlas uv 0.666666666666667 0.5 0.333333333333333 0.5 light 0 split 2

	target atlas
	{
		pass clear
		{
			colour_value 1 1 1 1
			identifier	77000
		}
	}

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass render_scene
			{
				profiling_id "Shadows ed prv"
				identifier	77877

				rq_last		219
			}
		}
	}
}

//  end of  Editor only


//  üîÆ cube reflections
//------------------------------------------------------------------------------------------------------------------------------------------
abstract target cubemap_target
{
	pass render_scene
	{
		profiling_id "Cube Reflect"
		identifier	33306

		load
		{
			all				clear
			// clear_colour	1 1 0 1  // test yellow
			clear_colour	0.2 0.4 0.8 1  // skyblue-
		}
		store
		{
			// colour	store
			depth			dont_care
			stencil			dont_care
		}

		expose cubemap

		visibility_mask  0x0000042D  // 1 rd 4 ter 8 vgt 20 obj  400 sky
		// visibility_mask  0x0000046D  // + 40 grass
		rq_last	  199

		overlays		off
		camera_cubemap_reorient true
		// shadows		SR3_Shadows
		// ^ crashes ..
		// todo: use that from code, not SR3_Shadows from here
		enable_forwardplus no
	}

	// pass generate_mipmaps  // ?
	// {
	// 	profiling_id "Cube Reflect Mipmaps"
	// 	identifier 33201
	
	// 	// mipmap_method compute_hq
	// }
}

compositor_node CubemapNode
{
	in 0 cubemap

	texture tmpCubemap target_width target_height target_format cubemap mipmaps 0

	target tmpCubemap +X : cubemap_target { }
	target tmpCubemap -X : cubemap_target { }
	target tmpCubemap +Y : cubemap_target { }
	target tmpCubemap -Y : cubemap_target { }
	target tmpCubemap +Z : cubemap_target { }
	target tmpCubemap -Z : cubemap_target { 
		pass ibl_specular
		{
			identifier	33111
			input tmpCubemap
			output cubemap
	}	}
}

//  not used
// MSAA Cubemaps do not exist. Therefore we have to manually define the RTV (RenderTextureView)
// To render to a temporary MSAA surface and tell Ogre to resolve the MSAA contents into a cubemap
compositor_node CubemapNodeMsaa
{
	in 0 cubemap

	// Note: IF you wish to preserve the MSAA contents of all 6 faces, then use
	//	'texture tmpMsaa target_width target_height 6 target_format 2d_array msaa 4 explicit_resolve'
	// instead
	texture tmpMsaa		target_width target_height target_format msaa 4 explicit_resolve
	texture tmpCubemap	target_width target_height target_format cubemap mipmaps 0

	rtv mixedCubemapRtv
	{
		// Specify we want to render to tmpMsaa at slot[0] but we want to resolve to tmpCubemap
		colour	0 tmpMsaa resolve tmpCubemap
	}

	target mixedCubemapRtv +X : cubemap_target { }
	target mixedCubemapRtv -X : cubemap_target { }
	target mixedCubemapRtv +Y : cubemap_target { }
	target mixedCubemapRtv -Y : cubemap_target { }
	target mixedCubemapRtv +Z : cubemap_target { }
	target mixedCubemapRtv -Z : cubemap_target {
		pass ibl_specular
		{
			identifier	33133
			input tmpCubemap
			output cubemap
	}	}
}


//  ü™û planar Reflections  Water üåä fluids
//------------------------------------------------------------------------------------
compositor_node PlanarReflectNode
{
	in 0 rt_renderwindow

	target rt_renderwindow
	{
		pass render_scene
		{
			profiling_id "Planar Reflection"
			identifier 44001

			load
			{
				all				clear
				clear_colour	0.2 0.4 0.6 1
			}
			store
			{
				colour	store_or_resolve
				depth	store  //?
				stencil	dont_care
			}

			visibility_mask  0x0000022D  // 1 rd 4 ter 8 vgt 20 obj  200 sky
			rq_last		209
			overlays	 off
			//shadows  SR3_Shadows  // no-
		}

		pass generate_mipmaps
		{
			profiling_id "Planar Reflect Mipmaps"
			identifier 44201
		
			mipmap_method compute_hq
		}
	}
}

workspace PlanarReflections
{
	connect_output PlanarReflectNode 0
}


//------------------------------------------------------------------------------------
//  üèóÔ∏è ed rtt 3  cam preview  normal all OLD
compositor_node Rtt_View3D_Old
{
	in 0 rt_output

	target rt_output
	{
		pass render_scene
		{
			profiling_id "RTT 3 view all"
			identifier	11103

			load
			{
				all				clear
				clear_colour	0 0 0 1  // black
			}
			store
			{
				colour	store
				depth	store
				stencil	store
			}

			visibility_mask  0x000001FF  // normal
			rq_first  0
			rq_last	  209  // before RQ_OVERLAY

			overlays	off
			shadows		SR3_Shadows  //! rem-
			// todo? use that from code, not SR3_Shadows from here
			// enable_forwardplus no  //-
			lod_bias	2.0
		}
	}
}

//------------------------------------------------------------------------------------
//  üèóÔ∏è ed rtt 3  cam preview  normal all
//------------------------------------------------------------------------------------------------------------------------------------------
compositor_node Rtt_View3D
{
	in 0 rt_output
	// in 1 dynamic_cubemap  // todo..

	texture depthBuffer  target_width target_height PFG_D32_FLOAT
	texture rtt_first    target_width target_height target_format
	texture rtt_refract  target_width target_height target_format
	texture rtt_final    target_width target_height target_format

	rtv rtt_first
	{
		depth_stencil	depthBuffer
	}
	rtv rtt_refract
	{
		depth_stencil	depthBuffer
	}
	rtv rtt_final
	{
		depth_stencil	depthBuffer
	}


	target rtt_first
	{
		//  [Main Render]  --------
		pass render_scene
		{
			profiling_id "RTT 3 view all"
			identifier	11103

			execution_mask			0xff
			viewport_modifier_mask	0xff

			load
			{
				all				clear
				// clear_depth  1.0
				clear_colour	0.2 0.4 0.6 1
			}
			store
			{
				colour	store_or_resolve
				depth	store
				stencil	dont_care
			}

			// expose dynamic_cubemap

			visibility_mask  0x000011FD   // set later  RV_MaskGameAll

			rq_last		80

			overlays	off
			shadows		SR3_Shadows  //** ed
			lod_bias	2.0
		}
	}

	target rtt_refract
	{
		pass render_quad
		{
			//  preserve depth buffer
			load {  colour dont_care  }
			material Ogre/Copy/4xFP32
			input 0 rtt_first
		}

		//  water, Pass with refractive objects
		pass render_scene
		{
			load {  all load  }
			store
			{
				colour	store_or_resolve
				depth	dont_care
				stencil	dont_care
			}

			// expose demo_dynamic_cubemap
			identifier	22201

			visibility_mask  0x00000002
			rq_first	210
			rq_last		211

			overlays		on
			use_refractions	depthBuffer rtt_first
		}

	}


	target rtt_final
	{
		pass render_quad
		{
			//  preserve depth buffer
			load {  colour dont_care  }
			material Ogre/Copy/4xFP32
			input 0 rtt_refract
		}

		//  [Main Render 2]  --------
		pass render_scene
		{
			profiling_id "Main view2"
			identifier	12204

			execution_mask			0xff
			viewport_modifier_mask	0xff

			load {  all load  }
			store
			{
				colour	store
				depth	store  //-
				stencil	dont_care
			}

			//expose dynamic_cubemap

			visibility_mask  0x000011FD

			rq_first		76  //82

			overlays	off
			// shadows		SR3_Shadows  //** added in code
		}
	}

	target rt_output
	{
		pass render_quad
		{
			load {  all dont_care  }
			store
			{
				colour	store
				depth	dont_care  //-
				stencil	dont_care
			}
			material Ogre/Copy/4xFP32
			input 0 rtt_final
		}
	}
}


//------------------------------------------------------------------------------------------------------------------------------------------
//  üèûÔ∏è  [Main render]  (üë• split screens too and üèóÔ∏è ed)  NEW Refract
//------------------------------------------------------------------------------------------------------------------------------------------
abstract compositor_node SR3_RenderAbs
{
	in 0 rt_renderwindow
	in 1 dynamic_cubemap

	texture depthBuffer  target_width target_height PFG_D32_FLOAT
	texture rtt_first    target_width target_height target_format
	texture rtt_refract  target_width target_height target_format
	texture rtt_final    target_width target_height target_format

	rtv rtt_first
	{
		depth_stencil	depthBuffer
	}
	rtv rtt_refract
	{
		depth_stencil	depthBuffer
	}
	rtv rtt_final
	{
		depth_stencil	depthBuffer
	}


	target rtt_first
	{
		//  [Main Render]  --------
		pass render_scene
		{
			profiling_id "Main view"
			identifier	22202

			//  executed in all views/eyes
			execution_mask			0xff
			//  affected by modifier, so renders to a portion of screen
			viewport_modifier_mask	0xff

			load
			{
				all				clear
				// clear_depth  1.0
				clear_colour	0.2 0.4 0.6 1
			}
			store
			{
				colour	store_or_resolve
				depth	store
				stencil	dont_care
			}

			//  materials in this pass will be using this cubemap
			expose dynamic_cubemap

			visibility_mask  0x000011FD   // set later  RV_MaskGameAll
			//! set later at end in all  : SR3_RenderAbs

			// rq_last		110  // glass,par etc
			// rq_last		209  //`
			rq_last		80

			overlays	off
			// shadows		SR3_Shadows  //** added in code
		}

		//** added in code  --------
		// pass custom MYGUI
		// {
			// provider?
			// profiling_id "GUI"

			// executed in the second eye
			// execution_mask			0x02
			// apply to the whole screen
			// viewport_modifier_mask	0x00
			
			// rq_first	254
			// rq_last		255
			
			// overlays	on
		// }
	}


	target rtt_refract
	{
		pass render_quad
		{
			//  preserve depth buffer
			load {  colour dont_care  }
			material Ogre/Copy/4xFP32
			input 0 rtt_first
		}

		//  water, Pass with refractive objects
		pass render_scene
		{
			load {  all load  }
			store
			{
				colour	store_or_resolve
				depth	store  //?
				stencil	dont_care
			}

			// expose demo_dynamic_cubemap
			identifier	22201

			visibility_mask  0x00000002
			rq_first	210
			rq_last		211

			overlays		on
			//shadows		Tutorial_TerrainShadowNode reuse
			use_refractions	depthBuffer rtt_first
		}

	}


	target rtt_final
	{
		pass render_quad
		{
			//  preserve depth buffer
			load {  colour dont_care  }
			material Ogre/Copy/4xFP32
			input 0 rtt_refract
		}

		//  [Main Render 2]  --------
		pass render_scene
		{
			profiling_id "Main view2"
			identifier	22204

			execution_mask			0xff
			viewport_modifier_mask	0xff

			load {  all load  }
			store
			{
				colour	store
				depth	store  //-
				stencil	dont_care
			}

			//  materials in this pass will be using this cubemap
			//expose dynamic_cubemap

			visibility_mask  0x000011FD
			//! set later at end in all  : SR3_RenderAbs

			rq_first		76  //82
			//rq_first		106  //82
			rq_last		255

			overlays	off
			// shadows		SR3_Shadows  //** added in code
		}
	}


	target rt_renderwindow
	{
		//  Output to window
		pass render_quad
		{
			// load { all dont_care }
			load {  colour dont_care  }
			store
			{
				colour	store
				depth	store  //-
				stencil	dont_care
			}
			material Ogre/Copy/4xFP32
			input 0 rtt_final
		}


		//  for Hud, split  --------
		pass render_scene
		{
			profiling_id "HUD"
			identifier	22501

			// executed in all eyes, not views
			// execution_mask			0xff
			// executed on first view/eye
			execution_mask			0x01
			// affected by modifier, apply to the whole screen
			viewport_modifier_mask	0x00

			load {  all dont_care  }
			store
			{
				colour	store
				depth	store  //-
				stencil	dont_care
			}
			visibility_mask  0x00002080  // RV_Hud, RV_Particles

			rq_first	220  // 225
			rq_last		230  // 230

			overlays	off
		}
	}
}


//  üèûÔ∏è  [Main render]  OLD no refract
//------------------------------------------------------------------------------------------------------------------------------------------
abstract compositor_node SR3_RenderAbsOld
{
	in 0 rt_renderwindow
	in 1 dynamic_cubemap

	target rt_renderwindow
	{
		pass clear  //  --------
		{
			profiling_id "Clear all"
			identifier	22000

			//  executed on first view/eye
			execution_mask			0x01
			//  affected by modifier, apply to the whole screen
			viewport_modifier_mask	0x00

			//  Only write to MSAA surface, don't resolve, overlays legacy problem
			store
			{
				colour	store
				depth	store
				stencil	store
			}
			colour_value  0.02 0.015 0.03 1
		}

		//  [Main Render]  --------
		pass render_scene
		{
			profiling_id "Main view"
			identifier	22201

			//  executed in all views/eyes
			execution_mask			0xff
			//  affected by modifier, so renders to a portion of screen
			viewport_modifier_mask	0xff

			store
			{
				colour	store
				depth	store
				stencil	store
			}

			//  materials in this pass will be using this cubemap
			expose dynamic_cubemap

			visibility_mask  0x000011FF   // set later  RV_MaskGameAll
			// rq_last		110  // glass,par etc

			overlays	on
			// shadows		SR3_Shadows  //** added in code
		}

		//  for Hud, split  --------
		pass render_scene
		{
			profiling_id "HUD"
			identifier	22501

			// executed in all eyes, not views
			// execution_mask			0xff
			// executed on first view/eye
			execution_mask			0x01
			// affected by modifier, apply to the whole screen
			viewport_modifier_mask	0x00

			store
			{
				colour	store
				depth	store  //-
				stencil	store
			}
			visibility_mask  0x00002000  // RV_Hud

			rq_first	221 //200
			rq_last		230

			overlays	off
		}

		//** added in code  --------
		// pass custom MYGUI
		// {
			// provider?
			// profiling_id "GUI"

			// executed in the second eye
			// execution_mask			0x02
			// apply to the whole screen
			// viewport_modifier_mask	0x00
			
			// rq_first	254
			// rq_last		255
			
			// overlays	on
		// }
	}
}


//------------------------------------------------------------------------------------------------------------------------------------------
//  [Main Nodes]  for all  Max_Players,  vis mask  same as RV_Hud3D[..]
//------------------------------------------------------------------------------------
compositor_node SR3_Render0 : SR3_RenderAbs
{	target rtt_first
	{	pass render_scene	{	visibility_mask  0x000011FD  }
}	}
compositor_node SR3_Render1 : SR3_RenderAbs
{	target rtt_first
	{	pass render_scene	{	visibility_mask  0x000101FD  }
}	}
compositor_node SR3_Render2 : SR3_RenderAbs
{	target rtt_first
	{	pass render_scene	{	visibility_mask  0x000201FD  }
}	}
compositor_node SR3_Render3 : SR3_RenderAbs
{	target rtt_first
	{	pass render_scene	{	visibility_mask  0x000401FD  }
}	}
compositor_node SR3_Render4 : SR3_RenderAbs
{	target rtt_first
	{	pass render_scene	{	visibility_mask  0x000801FD  }
}	}
compositor_node SR3_Render5 : SR3_RenderAbs
{	target rtt_first
	{	pass render_scene	{	visibility_mask  0x001001FD  }
}	}

//  Old  no refract
compositor_node SR3_RenderOld0 : SR3_RenderAbsOld
{	target rt_renderwindow
	{	pass clear			{	}
		pass render_scene	{	visibility_mask  0x000011FF  }
}	}
compositor_node SR3_RenderOld1 : SR3_RenderAbsOld
{	target rt_renderwindow
	{	pass clear			{	}
		pass render_scene	{	visibility_mask  0x000101FF  }
}	}
compositor_node SR3_RenderOld2 : SR3_RenderAbsOld
{	target rt_renderwindow
	{	pass clear			{	}
		pass render_scene	{	visibility_mask  0x000201FD  }
}	}
compositor_node SR3_RenderOld3 : SR3_RenderAbsOld
{	target rt_renderwindow
	{	pass clear			{	}
		pass render_scene	{	visibility_mask  0x000401FD  }
}	}
compositor_node SR3_RenderOld4 : SR3_RenderAbsOld
{	target rt_renderwindow
	{	pass clear			{	}
		pass render_scene	{	visibility_mask  0x000801FD  }
}	}
compositor_node SR3_RenderOld5 : SR3_RenderAbsOld
{	target rt_renderwindow
	{	pass clear			{	}
		pass render_scene	{	visibility_mask  0x001001FD  }
}	}


//  [Workspaces]  0 also for ed üèóÔ∏è
//------------------------------------------------------------------------------------
workspace SR3_Workspace0
{
	connect_external 0 SR3_Render0 0  // Render Window  on channel #0
	connect_external 1 SR3_Render0 1  // Cubemap  on channel #1
}
workspace SR3_Workspace1
{
	connect_external 0 SR3_Render1 0
	connect_external 1 SR3_Render1 1
}
workspace SR3_Workspace2
{
	connect_external 0 SR3_Render2 0
	connect_external 1 SR3_Render2 1
}
workspace SR3_Workspace3
{
	connect_external 0 SR3_Render3 0
	connect_external 1 SR3_Render3 1
}
workspace SR3_Workspace4
{
	connect_external 0 SR3_Render4 0
	connect_external 1 SR3_Render4 1
}
workspace SR3_Workspace5
{
	connect_external 0 SR3_Render5 0
	connect_external 1 SR3_Render5 1
}

//  Old  no refract  ----
workspace SR3_WorkspaceOld0
{
	connect_external 0 SR3_RenderOld0 0  // Render Window  on channel #0
	connect_external 1 SR3_RenderOld0 1  // Cubemap  on channel #1
}
workspace SR3_WorkspaceOld1
{
	connect_external 0 SR3_RenderOld1 0
	connect_external 1 SR3_RenderOld1 1
}
workspace SR3_WorkspaceOld2
{
	connect_external 0 SR3_RenderOld2 0
	connect_external 1 SR3_RenderOld2 1
}
workspace SR3_WorkspaceOld3
{
	connect_external 0 SR3_RenderOld3 0
	connect_external 1 SR3_RenderOld3 1
}
workspace SR3_WorkspaceOld4
{
	connect_external 0 SR3_RenderOld4 0
	connect_external 1 SR3_RenderOld4 1
}
workspace SR3_WorkspaceOld5
{
	connect_external 0 SR3_RenderOld5 0
	connect_external 1 SR3_RenderOld5 1
}
