//  < NOT USED >
//  all here are just for old reference


compositor_node HdrRenderingNode
{
	texture rt0			target_width target_height PFG_RGBA16_FLOAT msaa_auto explicit_resolve
	texture oldLumRt	           1             1 PFG_R16_FLOAT depth_pool 0 keep_content

	target rt0
	{
		pass render_scene
		{
			load
			{
				all				clear
				// clear_colour	0.2 0.4 0.6 1
				// clear_colour	6.667 13.333 20 1
				clear_colour	13.333 26.667 40 1
			}
			store
			{
				depth			dont_care
				stencil			dont_care
			}
			//lod_update_list	off					//Turn Lod off?
			//shadows				ShadowMapDebuggingShadowNode
			shadows  SR3_Shadows
			overlays			off

			profiling_id "Main Render"
		}
	}

	//Initialize lumRt1 at startup, to avoid NaNs.
	target oldLumRt
	{
		pass clear
		{
			num_initial 1
			colour_value 0.01 0.01 0.01 1
		}
	}

	out 0 rt0
	out 1 oldLumRt
}

compositor_node HdrMsaaResolve
{
	in 0 hdr_msaa_rt
	in 1 oldLumRt

	texture resolvedRt target_width target_height PFG_RGBA16_FLOAT depth_pool 0

	target resolvedRt
	{
		pass render_quad
		{
			load { all dont_care }
			material HDR/Resolve_4xFP32_HDR_Box
			input 0 hdr_msaa_rt
			input 1 oldLumRt

			profiling_id "Resolve HDR MSAA"
		}
	}

	out 0 resolvedRt
}

compositor_node HdrPostprocessingNode
{
	in 0 rt0
	in 1 lumRt1
	in 2 rt_output

	//For maximum quality use these as FLOAT16_RGBA, however they're slower on
	//AMD cards (0.748ms slower on AMD Radeon HD 7770 at 1920x1080).
	// texture rtBlur0	256 256 PFG_RGBA16_FLOAT	depth_pool 0
	// texture rtBlur1	256 256 PFG_RGBA16_FLOAT	depth_pool 0

	texture rtBlur0	256 256 PFG_R10G10B10A2_UNORM	depth_pool 0
	texture rtBlur1	256 256 PFG_R10G10B10A2_UNORM	depth_pool 0

	texture lumRt0	  1   1 PFG_R16_FLOAT	depth_pool 0
	//texture lumRt1  1   1 PFG_R16_FLOAT	depth_pool 0
	texture rtIter0	 64  64 PFG_R16_FLOAT	depth_pool 0
	texture rtIter1	 16  16 PFG_R16_FLOAT	depth_pool 0
	texture rtIter2	  4   4 PFG_R16_FLOAT	depth_pool 0

	// Calculate luminosity
	target rtIter0
	{
		pass render_quad
		{
			load		{ all dont_care }
			material	HDR/DownScale01_SumLumStart
			input		0	rt0

			profiling_id "Start Luminance"
		}
	}

	target rtIter1
	{
		pass render_quad
		{
			load		{ all dont_care }
			material	HDR/DownScale02_SumLumIterative
			input		0	rtIter0

			profiling_id "Iterate Luminance"
		}
	}

	target rtIter2
	{
		pass render_quad
		{
			load		{ all dont_care }
			material	HDR/DownScale02_SumLumIterative
			input		0	rtIter1

			profiling_id "Iterate Luminance"
		}
	}

	target lumRt0
	{
		pass render_quad
		{
			load		{ all dont_care }
			material	HDR/DownScale03_SumLumEnd
			input		0	rtIter2
			input		1	lumRt1

			profiling_id "Obtain Final Luminance value"
		}
	}

	target lumRt1
	{
		pass render_quad
		{
			load		{ all dont_care }
			material	Ogre/Copy/1xFP32
			input		0	lumRt0

			profiling_id "Copy Luminance for avg next frame"
		}
	}

	// Perform Bloom
	target rtBlur0
	{
		pass render_quad
		{
			load		{ all dont_care }
			material	HDR/BrightPass_Start
			input		0	rt0
			input		1	lumRt0
			// input		1	rtIter0  // test

			profiling_id "Bloom (Start)"
		}
	}

	target rtBlur1
	{
		pass render_quad
		{
			load		{ all dont_care }
			material	HDR/BoxBlurH
			input		0	rtBlur0

			profiling_id "Bloom (Blur Horizontal)"
		}
	}

	target rtBlur0
	{
		pass render_quad
		{
			load		{ all dont_care }
			material	HDR/BoxBlurV
			input		0	rtBlur1

			profiling_id "Bloom (Blur Vertical)"
		}
	}

	target rtBlur1
	{
		pass render_quad
		{
			load		{ all dont_care }
			material	HDR/BoxBlurH
			input		0	rtBlur0

			profiling_id "Bloom (Blur Horizontal)"
		}
	}

	target rtBlur0
	{
		pass render_quad
		{
			load		{ all dont_care }
			material	HDR/BoxBlurV
			input		0	rtBlur1

			profiling_id "Bloom (Blur Vertical)"
		}
	}

	target rtBlur1
	{
		pass render_quad
		{
			load		{ all dont_care }
			material	HDR/BoxBlurH
			input		0	rtBlur0

			profiling_id "Bloom (Blur Horizontal)"
		}
	}

	target rtBlur0
	{
		pass render_quad
		{
			load		{ all dont_care }
			material	HDR/BoxBlurH
			input		0	rtBlur1

			profiling_id "Bloom (Blur Horizontal)"
		}
	}

	target rtBlur1
	{
		pass render_quad
		{
			load		{ all dont_care }
			material	HDR/BoxBlurH
			input		0	rtBlur0

			profiling_id "Bloom (Blur Horizontal)"
		}
	}

	target rtBlur0
	{
		pass render_quad
		{
			load		{ all dont_care }
			material	HDR/BoxBlurH
			input		0	rtBlur1

			profiling_id "Bloom (Blur Horizontal)"
		}
	}

	target rt_output
	{
		pass render_quad
		{
			load		{ colour dont_care }
			store
			{
				//Required by Metal as the overlays in the next pass will break the render encoder,
				//causing this pass to be resolved and then the overlays would render over a black
				//background (unfortunately, this also causes a performance hit).
				colour store
			}
			material	HDR/FinalToneMapping
			input		0	rt0
			input		1	lumRt0
			input		2	rtBlur0
			// input		2	rt0  // test

			profiling_id "HDR Final ToneMapping"
		}
	}

	out 0 rt_output
}

compositor_node HdrRenderUi
{
	in 0 rt_output

	target rt_output
	{
		pass render_scene
		{
			lod_update_list	off

			//Render Overlays
			overlays	on
			rq_first	254
			rq_last		255

			profiling_id "Overlays"
		}
	}

	//This output is not always used.
	out 0 rt_output
}

workspace HdrWorkspace
{
	connect HdrRenderingNode 0		HdrPostprocessingNode 0
	connect HdrRenderingNode 1		HdrPostprocessingNode 1
	connect_output					HdrPostprocessingNode 2
	connect	HdrPostprocessingNode 0	HdrRenderUi 0
}

workspace HdrWorkspaceMsaa
{
	connect HdrRenderingNode 0 HdrMsaaResolve 0
	connect HdrRenderingNode 1 HdrMsaaResolve 1
	connect HdrMsaaResolve 0 HdrPostprocessingNode 0
	connect HdrRenderingNode 1 HdrPostprocessingNode 1
	connect_output HdrPostprocessingNode 2
	connect HdrPostprocessingNode 0 HdrRenderUi 0
}


//  üèóÔ∏è ed rtt 2  terrain.jpg minimap preview
//------------------------------------------------------------------------------------
compositor_node Rtt_Terrain
{
	in 0 rt_output
	// in 1 dynamic_cubemap

	texture depthBuffer  target_width target_height PFG_D32_FLOAT
	texture rtt_first    target_width target_height target_format
	texture rtt_refract  target_width target_height target_format
	texture rtt_final    target_width target_height target_format

	rtv rtt_first
	{
		depth_stencil	depthBuffer
	}
	rtv rtt_refract
	{
		depth_stencil	depthBuffer
	}
	rtv rtt_final
	{
		depth_stencil	depthBuffer
	}


	target rtt_first
	{
		//  [Terrain Render]  --------
		pass render_scene
		{
			profiling_id "RTT 2 Terrain"
			identifier	22201

			load
			{
				all				clear
				// clear_depth  1.0
				clear_colour	0.2 0.4 0.6 1
			}
			store
			{
				colour	store_or_resolve
				depth	store
				stencil	dont_care
			}

			// expose dynamic_cubemap

			visibility_mask  0x00000024  // RV_Terrain + RV_Objects
			rq_last		20

			overlays	off
			//- shadows		SR3_Shadows  //** ed
			lod_bias	2.0
			enable_forwardplus no
		}
	}

	target rtt_refract
	{
		pass render_quad
		{
			profiling_id "RTT 2 b4 refract"
			identifier	22212

			//  preserve depth buffer
			load {  colour dont_care  }
			material Ogre/Copy/4xFP32
			input 0 rtt_first
		}

		//  water, Pass with refractive objects
		pass render_scene
		{
			profiling_id "RTT 2 Refract"
			identifier	22202

			load {  all load  }
			store
			{
				colour	store_or_resolve
				depth	dont_care
				stencil	dont_care
			}

			// expose demo_dynamic_cubemap

			visibility_mask  0x00000002
			rq_first  73
			rq_last   75

			overlays	off
			use_refractions	depthBuffer rtt_first
		}
	}

	target rt_output
	{
		pass render_quad
		{
			profiling_id "RTT 2 Final"
			identifier	22299
			
			load {  colour dont_care  }
			material Ogre/Copy/4xFP32
			input 0 rtt_refract
		}
	}
}

//------------------------------------------------------------------------------------
//  üèóÔ∏è ed rtt 3  cam preview  normal all OLD
compositor_node Rtt_View3D_Old
{
	in 0 rt_output

	target rt_output
	{
		pass render_scene
		{
			profiling_id "RTT 3 view all"
			identifier	33301

			load
			{
				all				clear
				clear_colour	0 0 0 1  // black
			}
			store
			{
				colour	store
				depth	store
				stencil	store
			}

			visibility_mask  0x000001FF  // normal
			rq_first  0
			rq_last	  209  // before RQ_OVERLAY

			overlays	off
			shadows		SR3_Shadows  //! rem-
			// use that from code, not SR3_Shadows from here
			// enable_forwardplus no  //-
			lod_bias	2.0
		}
	}
}

//------------------------------------------------------------------------------------
//  üèóÔ∏è ed rtt 3  cam preview  normal all
//------------------------------------------------------------------------------------------------------------------------------------------
compositor_node Rtt_View3D
{
	in 0 rt_output
	// in 1 dynamic_cubemap

	texture depthBuffer  target_width target_height PFG_D32_FLOAT
	texture rtt_first    target_width target_height target_format
	texture rtt_refract  target_width target_height target_format
	texture rtt_final    target_width target_height target_format

	rtv rtt_first
	{
		depth_stencil	depthBuffer
	}
	rtv rtt_refract
	{
		depth_stencil	depthBuffer
	}
	rtv rtt_final
	{
		depth_stencil	depthBuffer
	}


	target rtt_first
	{
		//  [Main Render]  --------
		pass render_scene
		{
			profiling_id "RTT 3 view Main"
			identifier	33301

			execution_mask			0xff
			viewport_modifier_mask	0xff

			load
			{
				all				clear
				clear_depth  1.0
				clear_colour	0.2 0.4 0.6 1
			}
			store
			{
				colour	store_or_resolve
				depth	store
				stencil	dont_care
			}

			// expose dynamic_cubemap

			visibility_mask  0x000011FD   // set later  RV_MaskGameAll

			rq_last		80

			overlays	off
			shadows		SR3_Shadows  //** ed
			lod_bias	2.0
		}
	}

	target rtt_refract
	{
		pass render_quad
		{
			profiling_id "RTT 3 b4 refract"
			identifier	33312

			//  preserve depth buffer
			load {  colour dont_care  }
			material Ogre/Copy/4xFP32
			input 0 rtt_first
		}

		//  water, Pass with refractive objects
		pass render_scene
		{
			profiling_id "RTT 3 view Refract"
			identifier	33302

			load {  all load  }
			store
			{
				colour	store_or_resolve
				depth	dont_care
				stencil	dont_care
			}

			// expose demo_dynamic_cubemap

			visibility_mask  0x00000002
			rq_first  73
			rq_last   75

			overlays	off
			use_refractions	depthBuffer rtt_first
		}

	}


	target rtt_final
	{
		pass render_quad
		{
			profiling_id "RTT 3 b4 after"
			identifier	33314

			//  preserve depth buffer
			load {  colour dont_care  }
			material Ogre/Copy/4xFP32
			input 0 rtt_refract
		}

		//  [Main Render 2]  --------
		pass render_scene
		{
			profiling_id "RTT 3 view After"
			identifier	33304

			execution_mask			0xff
			viewport_modifier_mask	0xff

			load {  all load  }
			store
			{
				colour	store
				depth	store  //-
				stencil	dont_care
			}

			//expose dynamic_cubemap

			visibility_mask  0x000011FD

			rq_first  76  //82

			overlays	off
			// shadows	SR3_Shadows  //** added in code
		}
	}

	target rt_output
	{
		pass render_quad
		{
			profiling_id "RTT 3 Final"
			identifier	33399

			load {  all dont_care  }
			store
			{
				colour	store
				depth	dont_care  //-
				stencil	dont_care
			}
			material Ogre/Copy/4xFP32
			input 0 rtt_final
		}
	}
}


//  üåí shadows  - HQ, only for ed preview cam
//------------------------------------------------------------------------------------
compositor_node_shadow SR3_Shadows
{
	technique pssm

	//**  shadows par
	// texture atlas 3072 2048 PFG_D32_FLOAT  // medium 2k
	// texture atlas 6144 4096 PFG_D32_FLOAT  // high 4k
	texture atlas 12288 8192 PFG_D32_FLOAT  // ultra high 8k

	num_splits		3
	pssm_lambda		0.95
	shadow_map 0 atlas uv 0.000000000000000 0.0 0.666666666666667 1.0 light 0 split 0
	shadow_map 1 atlas uv 0.666666666666667 0.0 0.333333333333333 0.5 light 0 split 1
	shadow_map 2 atlas uv 0.666666666666667 0.5 0.333333333333333 0.5 light 0 split 2

	target atlas
	{
		pass clear
		{
			colour_value 1 1 1 1
			identifier	77000
		}
	}

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass render_scene
			{
				profiling_id "Shadows ed prv"
				identifier	77077

				rq_last		219
			}
		}
	}
}


//------------------------------------------------------------------------------------------------------------------------------------------
//  < NOT USED >
//  NEW 4 Refract MSAA
//------------------------------------------------------------------------------------------------------------------------------------------

compositor_node RefractionsRenderingNode
{
	// rtt_first & rtt_final MUST share the same depth buffer.
	// Depth pools already take care of that. But just to be sure, we make it explicit
	texture depthBuffer  target_width target_height PFG_D32_FLOAT msaa_auto
	texture rtt_first    target_width target_height target_format msaa_auto

	rtv rtt_first
	{
		depth_stencil	depthBuffer
	}

	target rtt_first
	{
		// Pass with opaque objects (and possibly regular transparents)
		pass render_scene
		{
			load
			{
				all				clear
				clear_colour	0.2 0.4 0.6 1
			}
			store
			{
				// We'll need both the MSAA (to continue rendering during the refraction pass)
				// and the resolved version (to be used sampled refractions)
				colour	store_and_resolve
				depth	store
				stencil	dont_care
			}
			overlays	off
			shadows		RefractionsShadowNode

			rq_last		199

			profiling_id "Opaque + Regular Transparents"
		}
	}

	out 0 rtt_first
	out 1 depthBuffer
}

compositor_node RefractionsMsaaDepthResolve
{
	in 0 gBufferDB

	texture resolvedDB target_width target_height PFG_R32_FLOAT depth_pool 0

	// We need to "downsample/resolve" mrtDepthBuffer because the impact
	// performance on Refractions is gigantic.
	target resolvedDB
	{
		pass render_quad
		{
			load { all dont_care }
			material Ogre/Resolve/1xFP32_Subsample0
			input 0 gBufferDB

			profiling_id "Resolve Depth Buffer"
		}
	}

	out 0 resolvedDB
}

compositor_node RefractionsRefractionsNode
{
	in 0 rtt_first
	in 1 depthBuffer
	in 2 depthBufferNoMsaa
	in 3 rt_renderwindow

	// rtt_first & rtt_final MUST share the same depth buffer.
	// Depth pools already take care of that. But just to be sure, we make it explicit
	texture rtt_final	target_width target_height target_format msaa_auto

	rtv rtt_final
	{
		depth_stencil	depthBuffer
	}


	target rtt_final
	{
		// Perform exact copy (MSAA-preserving) so we can continue rendering
		// into rtt_final. Meanwhile rtt_first will be used for sampling refractions
		pass texture_copy
		{
			in	rtt_first
			out rtt_final

			profiling_id "Copy / Clone rtt_first"
		}

		// Pass with refractive objects
		pass render_scene
		{
			load
			{
				all		load
			}
			store
			{
				colour	store_or_resolve
				depth	dont_care
				stencil	dont_care
			}
			identifier	10002

			visibility_mask  0x00000002
			rq_first  210
			rq_last   212

			overlays		on
			shadows			RefractionsShadowNode reuse
			use_refractions	depthBufferNoMsaa rtt_first

			profiling_id "Refractive Objects"
		}
	}

	target rt_renderwindow
	{
		//Output to window
		pass render_quad
		{
			load { all dont_care }
			material Ogre/Copy/4xFP32
			input 0 rtt_final

			profiling_id "Copy to Window"
		}


		//  for Hud, split  --------
		pass render_scene
		{
			profiling_id "Main HUD"
			identifier	10007

			// executed in all eyes, not views
			// execution_mask			0xff
			// executed on first view/eye
			execution_mask			0x01
			// affected by modifier, apply to the whole screen
			viewport_modifier_mask	0x00

			store
			{
				colour	store
				depth	store  //-
				stencil	store  //?
			}
			visibility_mask  0x00002080  // RV_Hud, RV_Particles

			rq_first  220  // 225
			rq_last   230  // 230

			overlays	off
		}
	}
}


abstract target cubemap_target_shadow
{
	pass render_scene
	{
		load
		{
			all									clear
			clear_colour_reverse_depth_aware	1 1 1 1
		}
		store
		{
			//We only care about the contents of the colour target with point shadows
			depth			dont_care
			stencil			dont_care
		}
		camera_cubemap_reorient true
	}
}

//  shadow-
compositor_node_shadow RefractionsShadowNode
{
	technique pssm

	texture atlas		2048 7168 PFG_D32_FLOAT
	texture tmpCubemap	1024 1024 PFG_R32_FLOAT cubemap depth_format PFG_D32_FLOAT

	num_splits		3
	pssm_lambda		0.95
	shadow_map 0 atlas uv 0.0 0.000000000000000 1.0 0.285714285714286 light 0 split 0
	shadow_map 1 atlas uv 0.0 0.285714285714286 0.5 0.142857142857143 light 0 split 1
	shadow_map 2 atlas uv 0.5 0.285714285714286 0.5 0.142857142857143 light 0 split 2

	technique focused
	shadow_map 3 atlas uv 0.0 0.428571428571429 1.0 0.285714285714286 light 1
	shadow_map 4 atlas uv 0.0 0.714285714285714 1.0 0.285714285714286 light 2

	target atlas
	{
		pass clear
		{
			colour_value 1 1 1 1
		}
	}

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass render_scene
			{
			}
		}
	}

	shadow_map_target_type directional spot
	{
		shadow_map 3 4
		{
			pass render_scene
			{
			}
		}
	}

	shadow_map_target_type point
	{
		shadow_map_repeat 3 4
		{
			target tmpCubemap +X : cubemap_target_shadow {}
			target tmpCubemap -X : cubemap_target_shadow {}
			target tmpCubemap +Y : cubemap_target_shadow {}
			target tmpCubemap -Y : cubemap_target_shadow {}
			target tmpCubemap +Z : cubemap_target_shadow {}
			target tmpCubemap -Z : cubemap_target_shadow {}

			shadow_map
			{
				pass render_quad
				{
					material Ogre/DPSM/CubeToDpsm
					input 0 tmpCubemap
				}
			}
		}
	}
}


workspace RefractionsWorkspace
{
	connect	RefractionsRenderingNode 0 1 1 RefractionsRefractionsNode 0 1 2
	connect_output RefractionsRefractionsNode 3
}

workspace RefractionsWorkspaceMsaa
{
	// connect <node_name_1> [<output_ch #>] [<output_ch #>]  <node_name_2> [<input_ch #>] [<input_ch #>]

	// Refractions_RenderingNode          Refractions_RefractionsNode
	//  - out 0 rtt_first  --------------->  in 0 rtt_first
	// /  out 1 depthBuffer  ------------->  in 1 depthBuffer
	// \                            _----->  in 2 depthBufferNoMsaa
	//  \                          /         in 3 rt_renderwindow  target, connect_output
	//   Refractions_MsaaDepthResolve
 	
	connect	RefractionsRenderingNode 1 RefractionsMsaaDepthResolve 0
	connect	RefractionsRenderingNode 0 1 RefractionsRefractionsNode 0 1
	connect	RefractionsMsaaDepthResolve 0 RefractionsRefractionsNode 2
	connect_output RefractionsRefractionsNode 3
}



//  not used
// MSAA Cubemaps do not exist. Therefore we have to manually define the RTV (RenderTextureView)
// To render to a temporary MSAA surface and tell Ogre to resolve the MSAA contents into a cubemap
compositor_node CubemapNodeMsaa
{
	in 0 cubemap

	// Note: IF you wish to preserve the MSAA contents of all 6 faces, then use
	//	'texture tmpMsaa target_width target_height 6 target_format 2d_array msaa 4 explicit_resolve'
	// instead
	texture tmpMsaa		target_width target_height target_format msaa 4 explicit_resolve
	texture tmpCubemap	target_width target_height target_format cubemap mipmaps 0

	rtv mixedCubemapRtv
	{
		// Specify we want to render to tmpMsaa at slot[0] but we want to resolve to tmpCubemap
		colour	0 tmpMsaa resolve tmpCubemap
	}

	target mixedCubemapRtv +X : cubemap_target { }
	target mixedCubemapRtv -X : cubemap_target { }
	target mixedCubemapRtv +Y : cubemap_target { }
	target mixedCubemapRtv -Y : cubemap_target { }
	target mixedCubemapRtv +Z : cubemap_target { }
	target mixedCubemapRtv -Z : cubemap_target {
		pass ibl_specular
		{
			identifier	30033
			input tmpCubemap
			output cubemap
	}	}
}


//  < NOT USED >
//  SSAO  Old
//------------------------------------------------------------------------------------------------------------------------------------------
abstract compositor_node SR3_RenderAbsOld_SSAO
{
	in 0 rt_renderwindow
	// in 1 dynamic_cubemap

	texture RT0				target_width target_height PFG_RGBA8_UNORM_SRGB		msaa_auto
	texture gBufferNormals	target_width target_height PFG_R10G10B10A2_UNORM	msaa_auto explicit_resolve
	
	texture depthTexture		target_width			target_height				PFG_D32_FLOAT msaa_auto
	texture depthTextureCopy	target_width_scaled 0.5	target_height_scaled 0.5	PFG_D32_FLOAT
	
	texture ssaoTexture target_width_scaled 0.5 target_height_scaled 0.5 PFG_R16_FLOAT depth_pool 0
	
	texture blurTextureHorizontal	target_width target_height PFG_R16_FLOAT depth_pool 0
	texture blurTextureVertical		target_width target_height PFG_R16_FLOAT depth_pool 0

	rtv RT0
	{
		colour			RT0 gBufferNormals
		depth_stencil	depthTexture
	}

	target RT0
	{
		pass render_scene
		{
			load
			{
				all				clear
				clear_colour	0	0.2 0.4 0.6 1
				clear_colour	1	0.5 0.5 1.0 1
			}
			lod_update_list	off
			overlays	off

			gen_normals_gbuffer true

			// expose dynamic_cubemap

			// rq_first	0
			// rq_last		12
			shadows  SR3_Shadows
		}
	}
	
	target depthTextureCopy
	{
		pass render_quad
		{
			load { all dont_care }
			material Ogre/Depth/DownscaleMax
	    	input 0 depthTexture
		}
	}

	target ssaoTexture
	{
		pass render_quad
		{
			load
			{
				all				clear
				clear_colour	1 1 1 1
			}
			material SSAO/HS
	    	input 0 depthTextureCopy
			input 1 gBufferNormals

			quad_normals	camera_far_corners_view_space
		}
	}
	
	target blurTextureHorizontal
	{
		pass render_quad
		{
			load { all dont_care }
			material SSAO/BlurH
			input 0 ssaoTexture
			input 1 depthTextureCopy
		}
	}
	
	target blurTextureVertical
	{
		pass render_quad
		{
			load { all dont_care }
			material SSAO/BlurV
			input 0 blurTextureHorizontal
			input 1 depthTextureCopy
		}
	}

	target rt_renderwindow
	{
		pass render_quad
		{
			load { all dont_care }
			material SSAO/Apply
			input 0 blurTextureVertical
			input 1 RT0
			// input 1 gBufferNormals  // test
		}
		
		// pass render_scene
		// {
		// 	lod_update_list	off

		// 	//Render Overlays
		// 	overlays	on
		// 	rq_first	254
		// 	rq_last		255
		// }
	}
}


//------------------------------------------------------------------------------------------------------------------------------------------
//  < NOT USED >
//  üèûÔ∏è  [Main render]  (üë• split screens too and üèóÔ∏è ed)  NEW Refract
//------------------------------------------------------------------------------------------------------------------------------------------
abstract compositor_node SR3_RenderAbs
{
	in 0 rt_renderwindow
	in 1 dynamic_cubemap

	texture depthBuffer  target_width target_height PFG_D32_FLOAT
	texture rtt_first    target_width target_height target_format
	texture rtt_refract  target_width target_height target_format
	texture rtt_final    target_width target_height target_format

	rtv rtt_first
	{
		depth_stencil	depthBuffer
	}
	rtv rtt_refract
	{
		depth_stencil	depthBuffer
	}
	rtv rtt_final
	{
		depth_stencil	depthBuffer
	}


	target rtt_first
	{
		//  [Main Render]  --------
		pass render_scene
		{
			profiling_id "Main view"
			identifier	10001

			//  executed in all views/eyes
			execution_mask			0xff
			//  affected by modifier, so renders to a portion of screen
			viewport_modifier_mask	0xff

			load
			{
				all				clear
				// clear_depth  1.0
				clear_colour	0.2 0.4 0.6 1
			}
			store
			{
				colour	store_or_resolve
				depth	store
				stencil	dont_care
			}

			//  materials in this pass will be using this cubemap
			expose dynamic_cubemap

			visibility_mask  0x000011FD   // set later  RV_MaskGameAll
			//! set later at end in all  : SR3_RenderAbs

			// rq_last		110  // glass,par etc
			// rq_last		209  //`
			rq_last		80

			overlays	off
			// shadows	SR3_Shadows  //** added in code
		}
	}


	target rtt_refract
	{
		pass render_quad
		{
			profiling_id "Main b4 refract"
			identifier	10012

			//  preserve depth buffer
			load {  colour dont_care  }
			material Ogre/Copy/4xFP32
			input 0 rtt_first
		}

		//  water, Pass with refractive objects
		pass render_scene
		{
			profiling_id "Main Refract"
			identifier	10002

			load {  all load  }
			store
			{
				colour	store_or_resolve
				depth	dont_care  //?
				stencil	dont_care
			}

			// expose demo_dynamic_cubemap

			visibility_mask  0x00000002
			rq_first  210
			rq_last   212

			overlays	off
			//shadows	Tutorial_TerrainShadowNode reuse
			use_refractions	depthBuffer rtt_first
		}
	}


	target rtt_final
	{
		pass render_quad
		{
			profiling_id "Main b4 after"
			identifier	10013

			//  preserve depth buffer
			load {  colour dont_care  }
			material Ogre/Copy/4xFP32
			input 0 rtt_refract
		}

		//  [Main Render 2]  --------
		pass render_scene
		{
			profiling_id "Main After"
			identifier	10003

			execution_mask			0xff
			viewport_modifier_mask	0xff

			load {  all load  }
			store
			{
				colour	store
				depth	store  //-
				stencil	dont_care
			}

			//  materials in this pass will be using this cubemap
			//expose dynamic_cubemap

			//! set later at end in all  : SR3_RenderAbs
			visibility_mask  0x000011FD
			rq_first  76  //82

			overlays	off
			// shadows	SR3_Shadows  //** added in code
		}
	}


	target rt_renderwindow
	{
		//  Output to window
		pass render_quad
		{
			profiling_id "Main b4 hud"
			identifier	10017

			// load {  colour dont_care  }
			load {  all dont_care  }
			store
			{
				colour	store
				depth	dont_care  //-
				stencil	dont_care
			}
			material Ogre/Copy/4xFP32
			input 0 rtt_final
		}


		//  for Hud, split  --------
		pass render_scene
		{
			profiling_id "Main HUD"
			identifier	10007

			// executed in all eyes, not views
			// execution_mask			0xff
			// executed on first view/eye
			execution_mask			0x01
			// affected by modifier, apply to the whole screen
			viewport_modifier_mask	0x00

			store
			{
				colour	store
				depth	store  //-
				stencil	store  //?
			}
			visibility_mask  0x00002080  // RV_Hud, RV_Particles

			rq_first  220  // 225
			rq_last   230  // 230

			overlays	off
		}
	}
}


//------------------------------------------------------------------------------------------------------------------------------------------
//  < NOT USED >
//  üèûÔ∏è  [Main render]  OLD no refract
//------------------------------------------------------------------------------------------------------------------------------------------
abstract compositor_node SR3_RenderAbsOld
{
	in 0 rt_renderwindow
	in 1 dynamic_cubemap

	target rt_renderwindow
	{
		pass clear  //  --------
		{
			profiling_id "Old Clear all"
			identifier	21000

			//  executed on first view/eye
			execution_mask			0x01
			//  affected by modifier, apply to the whole screen
			viewport_modifier_mask	0x00

			//  Only write to MSAA surface, don't resolve, overlays legacy problem
			store
			{
				colour	store
				depth	store
				stencil	store
			}
			colour_value  0.02 0.015 0.03 1
		}

		//  [Main Render]  --------
		pass render_scene
		{
			profiling_id "Old Main view"
			identifier	21002

			//  executed in all views/eyes
			execution_mask			0xff
			//  affected by modifier, so renders to a portion of screen
			viewport_modifier_mask	0xff

			store
			{
				colour	store
				depth	store
				stencil	store
			}

			//  materials in this pass will be using this cubemap
			expose dynamic_cubemap

			visibility_mask  0x000011FF   // set later  RV_MaskGameAll
			// rq_last		110  // glass,par etc

			overlays	on
			// shadows		SR3_Shadows  //** added in code
		}

		//  for Hud, split  --------
		pass render_scene
		{
			profiling_id "Old HUD"
			identifier	21007

			// executed in all eyes, not views
			// execution_mask			0xff
			// executed on first view/eye
			execution_mask			0x01
			// affected by modifier, apply to the whole screen
			viewport_modifier_mask	0x00

			store
			{
				colour	store
				depth	store  //-
				stencil	store
			}
			visibility_mask  0x00002000  // RV_Hud

			rq_first  221 //200
			rq_last   230

			overlays	off
		}

		//** added in code  --------
		// pass custom MYGUI
		// {
			// provider?
			// profiling_id "GUI"

			// executed in the second eye
			// execution_mask			0x02
			// apply to the whole screen
			// viewport_modifier_mask	0x00

			// rq_first  254
			// rq_last   255

			// overlays	on
		// }
	}
}


//------------------------------------------------------------------------------------------------------------------------------------------
//  < NOT USED >
//  [Main Nodes]  for all  Max_Players,  vis mask  same as RV_Hud3D[..]
//------------------------------------------------------------------------------------
compositor_node SR3_RenderOld0_SSAO : SR3_RenderAbsOld_SSAO
{
}
compositor_node SR3_Render0 : SR3_RenderAbs
{	target rtt_first
	{	pass render_scene	{	visibility_mask  0x000011FD  }
}	}
compositor_node SR3_Render1 : SR3_RenderAbs
{	target rtt_first
	{	pass render_scene	{	visibility_mask  0x000101FD  }
}	}
compositor_node SR3_Render2 : SR3_RenderAbs
{	target rtt_first
	{	pass render_scene	{	visibility_mask  0x000201FD  }
}	}
compositor_node SR3_Render3 : SR3_RenderAbs
{	target rtt_first
	{	pass render_scene	{	visibility_mask  0x000401FD  }
}	}
compositor_node SR3_Render4 : SR3_RenderAbs
{	target rtt_first
	{	pass render_scene	{	visibility_mask  0x000801FD  }
}	}
compositor_node SR3_Render5 : SR3_RenderAbs
{	target rtt_first
	{	pass render_scene	{	visibility_mask  0x001001FD  }
}	}

//  Old  no refract
compositor_node SR3_RenderOld0 : SR3_RenderAbsOld
{	target rt_renderwindow
	{	pass clear			{	}
		pass render_scene	{	visibility_mask  0x000011FF  }
}	}
compositor_node SR3_RenderOld1 : SR3_RenderAbsOld
{	target rt_renderwindow
	{	pass clear			{	}
		pass render_scene	{	visibility_mask  0x000101FF  }
}	}
compositor_node SR3_RenderOld2 : SR3_RenderAbsOld
{	target rt_renderwindow
	{	pass clear			{	}
		pass render_scene	{	visibility_mask  0x000201FD  }
}	}
compositor_node SR3_RenderOld3 : SR3_RenderAbsOld
{	target rt_renderwindow
	{	pass clear			{	}
		pass render_scene	{	visibility_mask  0x000401FD  }
}	}
compositor_node SR3_RenderOld4 : SR3_RenderAbsOld
{	target rt_renderwindow
	{	pass clear			{	}
		pass render_scene	{	visibility_mask  0x000801FD  }
}	}
compositor_node SR3_RenderOld5 : SR3_RenderAbsOld
{	target rt_renderwindow
	{	pass clear			{	}
		pass render_scene	{	visibility_mask  0x001001FD  }
}	}


//  [Workspaces]  0 also for ed üèóÔ∏è
//------------------------------------------------------------------------------------
// workspace SR3_Workspace0_SSAO
// {
// 	connect_output SR3_Render0_SSAO 0
// }
workspace SR3_Workspace0
{
	connect_external 0 SR3_Render0 0  // Render Window  on channel #0
	connect_external 1 SR3_Render0 1  // Cubemap  on channel #1
}
workspace SR3_Workspace1
{
	connect_external 0 SR3_Render1 0
	connect_external 1 SR3_Render1 1
}
workspace SR3_Workspace2
{
	connect_external 0 SR3_Render2 0
	connect_external 1 SR3_Render2 1
}
workspace SR3_Workspace3
{
	connect_external 0 SR3_Render3 0
	connect_external 1 SR3_Render3 1
}
workspace SR3_Workspace4
{
	connect_external 0 SR3_Render4 0
	connect_external 1 SR3_Render4 1
}
workspace SR3_Workspace5
{
	connect_external 0 SR3_Render5 0
	connect_external 1 SR3_Render5 1
}

//  Old  no refract  ----
workspace SR3_WorkspaceOld0_SSAO
{
	connect_output SR3_RenderOld0_SSAO 0
}
workspace SR3_WorkspaceOld0
{
	connect_external 0 SR3_RenderOld0 0  // Render Window  on channel #0
	connect_external 1 SR3_RenderOld0 1  // Cubemap  on channel #1
}
workspace SR3_WorkspaceOld1
{
	connect_external 0 SR3_RenderOld1 0
	connect_external 1 SR3_RenderOld1 1
}
workspace SR3_WorkspaceOld2
{
	connect_external 0 SR3_RenderOld2 0
	connect_external 1 SR3_RenderOld2 1
}
workspace SR3_WorkspaceOld3
{
	connect_external 0 SR3_RenderOld3 0
	connect_external 1 SR3_RenderOld3 1
}
workspace SR3_WorkspaceOld4
{
	connect_external 0 SR3_RenderOld4 0
	connect_external 1 SR3_RenderOld4 1
}
workspace SR3_WorkspaceOld5
{
	connect_external 0 SR3_RenderOld5 0
	connect_external 1 SR3_RenderOld5 1
}
