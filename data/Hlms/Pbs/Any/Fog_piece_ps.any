
@piece( applyFog )
    @property( hlms_fog && !sky )
    //property( hlms_fog )  // todo: inside hfog and underwater, on sky too

    	@property( transparent_mode )
		    const float tr = pixelData.diffuse.w * 1.05; //par todo: not perfect..  //F0.w;
        @else
            const float tr = _h(1.0);
        @end

        const float distToCameraH = length( inPs.pos.xyz );
    	//const float camPosH =  passBuf.view[3][1];

        // ||  Height fog  first
        midf heightWeight = midf_c( exp2( -distToCameraH * atmo.fogHparams.z ) );
        const midf heightMul = saturate( ( inPs.worldH - atmo.fogHparams.x ) * atmo.fogHparams.y );  // amount H
        const midf3 fogHclr = lerp( lerp( finalColour.xyz,
                                        atmo.fogHcolor.xyz *tr,  atmo.fogHcolor.w),
                                    finalColour.xyz,  heightWeight );
        finalColour.xyz = lerp( fogHclr, finalColour.xyz, heightMul );
        // todo: lerp finalColour less?

    //end
    //property( hlms_fog && !sky )

        // **  Distance fog
        const midf luminance = dot( finalColour.xyz, midf3_c( _h(0.212655), _h(0.715158), _h(0.072187) ) );
        const midf lumFogWeight = max( exp2(    // fogBreakFalloff, fogBreakMinBrightness
            atmo.fogDensStartBreak.w * luminance + atmo.fogDensStartBreak.z ), _h(0.0) );
        
        const float distToCamera = max( _h(0.0), distToCameraH - atmo.fogDensStartBreak.y );
        midf fogWeight = midf_c( exp2( -distToCamera * atmo.fogDensStartBreak.x ) );  // amount
        fogWeight = saturate( lerp( _h(1.0), fogWeight, lumFogWeight ) );
        

       	// <>  fog Dir  sun -> away
        // todo: fix dir looking down..
        @property( hlms_lights_directional )
            midf3 lightDirW = light0Buf.lights[0].position.xyz;
        @else
            midf3 lightDirW = midf3_c(1,0,0);
        @end
    	const midf3 camPosW = midf3_c( passBuf.view[3][0], passBuf.view[3][1], passBuf.view[3][2] );
        const midf3 eyeDir = normalize(camPosW - inPs.pos.xyz);
		//float3 eyeDir = normalize(camPosObjSpace.xyz - posObjSpace.xyz);  //old
        float fogDir = dot( normalize(eyeDir.xz), normalize(lightDirW.xz) ) * _h(0.5) + _h(0.5);

        midf4 fogColour = lerp( atmo.fogColourSun,
                                atmo.fogColourAway,  fogDir );

        finalColour.xyz =
            //camPosW * 10.0 + 0.001 *  // test
            lerp( lerp( finalColour.xyz, fogColour.xyz *tr, fogColour.w ),  // transparency
                  finalColour.xyz,  fogWeight );

        // ~~  Fluid fog inside
        midf fluidDist = midf_c( exp2( -distToCameraH * atmo.fogFluidH.y ) );
        fluidDist = saturate( fluidDist - 0.3 );  // minimum par, depth h?
        float fluidHeight = saturate(( inPs.worldH - atmo.fogFluidH.x/*h*/) * atmo.fogFluidH.z);

        finalColour.xyz = lerp(
                            lerp ( atmo.fogFluidClr.xyz *tr, finalColour.xyz,  fluidDist ),
                            finalColour.xyz,  fluidHeight );  // fluid
    @end
@end


    ///_ calculate fog  * OLD *
    // float fogDepth = shSaturate((depth - fogParams.y) * fogParams.w);  // w = 1 / (max - min)
    // float fogDepthH = shSaturate((depth - fogParamsH.z) * fogParamsH.w);

    // float fogDir = dot( normalize(eyeDir.xz), normalize(lightDir.xz) ) * 0.5 + 0.5;
    // float fogH = shSaturate( (fogParamsH.x/*h*/ - worldPosY) * fogParamsH.y/*dens*/);

    // float4 fogClrDir = shLerp( fogColorAway, fogColorSun, fogDir);
    // float4 fogClrFinal = shLerp( fogClrDir, fogColorH, fogH);
    // float fogL = shLerp( fogDepth * fogClrDir.a, fogDepthH * fogColorH.a, fogH);

    // /// fluid fog
    // float flDepth = shSaturate(depth * fogFluidH.y);
    // float flH = shSaturate((fogFluidH.x/*h*/ - worldPosY) * fogFluidH.z);
    // float4 flClrFinal = shLerp( fogClrFinal, fogFluidClr, flH);
    // float flL = shLerp( fogL, flDepth /* * fogFluidClr.a*/, flH);

    // shOutputColour(0).xyz = shLerp( shOutputColour(0).xyz, flClrFinal.rgb, flL);
    ///_
