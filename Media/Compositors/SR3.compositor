//  reflections
abstract target cubemap_target
{
	pass render_scene
	{
		load
		{
			all				clear
			clear_colour	1 1 0 1  // test yellow
		}
		store
		{
			//We only care about the contents of the colour target
			// colour	store
			depth			dont_care
			stencil			dont_care
		}

		expose cubemap

		visibility_mask		0x0000012D
		// visibility_mask		0x010
		// 301
		// visibility_mask		0x000000FF
		overlays			off
		camera_cubemap_reorient true
	}

}

compositor_node CubemapNode
{
	in 0 cubemap

	texture tmpCubemap target_width target_height target_format cubemap mipmaps 0

	target tmpCubemap +X : cubemap_target { }
	target tmpCubemap -X : cubemap_target { }
	target tmpCubemap +Y : cubemap_target { }
	target tmpCubemap -Y : cubemap_target { }
	target tmpCubemap +Z : cubemap_target { }
	target tmpCubemap -Z : cubemap_target
	{
		pass ibl_specular
		{
			input tmpCubemap
			output cubemap
		}
	}
}

// MSAA Cubemaps do not exist. Therefore we have to manually define the RTV (RenderTextureView)
// To render to a temporary MSAA surface and tell Ogre to resolve the MSAA contents into a cubemap
compositor_node CubemapNodeMsaa
{
	in 0 cubemap

	// Note: IF you wish to preserve the MSAA contents of all 6 faces, then use
	//	'texture tmpMsaa target_width target_height 6 target_format 2d_array msaa 4 explicit_resolve'
	// instead
	texture tmpMsaa		target_width target_height target_format msaa 4 explicit_resolve
	texture tmpCubemap	target_width target_height target_format cubemap mipmaps 0

	rtv mixedCubemapRtv
	{
		// Specify we want to render to tmpMsaa at slot[0] but we want to resolve to tmpCubemap
		colour	0 tmpMsaa resolve tmpCubemap
	}

	target mixedCubemapRtv +X : cubemap_target { }
	target mixedCubemapRtv -X : cubemap_target { }
	target mixedCubemapRtv +Y : cubemap_target { }
	target mixedCubemapRtv -Y : cubemap_target { }
	target mixedCubemapRtv +Z : cubemap_target { }
	target mixedCubemapRtv -Z : cubemap_target
	{
		pass ibl_specular
		{
			input tmpCubemap
			output cubemap
		}
	}
}
//------------------------------------------------------------------------------------


//  render
compositor_node SR3_Render
{
	in 0 rt_renderwindow
	in 1 demo_dynamic_cubemap

	target rt_renderwindow
	{
		pass clear
		{
			execution_mask			0x01
			//Don't be affected by the modifier, apply to the whole screen
			viewport_modifier_mask	0x00

			// Only write to the MSAA surface (don't resolve!)
			// because overlays due to a legacy problem break the pass
			// thus if we resolve now, we'll resolve twice
			store
			{
				colour	store
				depth	store
				stencil	store
			}
			
			colour_value  0.02 0.015 0.03 1
		}

		pass render_scene
		{
			//Get executed in all eyes
			execution_mask			0xff
			//Be affected by the modifier, so we render just to a portion of the screen.
			viewport_modifier_mask	0xff

			// load
			// {
			// 	all			  clear
			// 	clear_colour  0.01 0.01 0.02 1
			// }

			// Only write to the MSAA surface (don't resolve!) (see clear pass)
			store
			{
				colour	store
				depth	store
				stencil	store
			}
			// store
			// {
			// 	colour	store
			// 	// colour	store_or_resolve
			// 	depth	dont_care
			// 	stencil	dont_care
			// }

			// Our materials in this pass will be using this cubemap,
			// so we need to expose it to the pass.
			expose demo_dynamic_cubemap

			overlays	off
			shadows		SR3_Shadows
		}

		// pass custom MYGUI
		// {
			// provider?  added in code
		// }
	}
}


//  shadows
compositor_node_shadow SR3_Shadows
{
	technique pssm

	texture atlas 3072 2048 PFG_D32_FLOAT

	num_splits		3
	pssm_lambda		0.95
	shadow_map 0 atlas uv 0.000000000000000 0.0 0.666666666666667 1.0 light 0 split 0
	shadow_map 1 atlas uv 0.666666666666667 0.0 0.333333333333333 0.5 light 0 split 1
	shadow_map 2 atlas uv 0.666666666666667 0.5 0.333333333333333 0.5 light 0 split 2

	target atlas
	{
		pass clear
		{
			colour_value 1 1 1 1
		}
	}

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass render_scene
			{
			}
		}
	}
}


//  workspace
workspace SR3_Workspace
{
	// Render Window on channel #0
	connect_external 0 SR3_Render 0
	// Cubemap on channel #1
	connect_external 1 SR3_Render 1
}
