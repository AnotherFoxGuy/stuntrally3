//  start of  Editor only

//  üèóÔ∏è ed rtt 0  for roadDensity.png
//------------------------------------------------------------------------------------
compositor_node Rtt_RoadDens
{
	in 0 rt_output

	target rt_output
	{
		pass render_scene
		{
			profiling_id "RTT 0 road dens"
			identifier	11100

			load
			{
				all				clear
				clear_colour	1 0 0 1  // red
			}
			store
			{
				colour	store
				depth	store
				stencil	store
			}
			//  todo: depth only?  add RV_Objects but black,  add smooth outline? ..
			visibility_mask  0x00004020  // RV_EdRoadDens + RV_Objects
			// visibility_mask  0x00004000  // RV_EdRoadDens
			
			rq_first  1  // road, objects
			rq_last	  72

			overlays	off
			// enable_forward_plus false  // is not recognized ?
		}
	}
}

//  üèóÔ∏è ed rtt 1  for road.png minimap preview
//------------------------------------------------------------------------------------
compositor_node Rtt_RoadPreview
{
	in 0 rt_output

	target rt_output
	{
		pass render_scene
		{
			profiling_id "RTT 1 road prv"
			identifier	11101

			load
			{
				all				clear
				clear_colour	0 0 0 0  // alpha
			}
			store
			{
				colour	store
				depth	store
				stencil	store
			}
			visibility_mask  0x00008000  // RV_EdRoadPreview
			
			rq_first  70  // road
			rq_last	  72

			overlays	off
			// enable_forward_plus false
		}
	}
}

//  üèóÔ∏è ed rtt 2  for terrain.jpg minimap preview
compositor_node Rtt_Terrain
{
	in 0 rt_output

	target rt_output
	{
		pass render_scene
		{
			profiling_id "RTT 2 terrain"
			identifier	11102

			load
			{
				all				clear
				clear_colour	0 0 0 1  // black
			}
			store
			{
				colour	store
				depth	store
				stencil	store
			}
			visibility_mask  0x00000024  // RV_Terrain & Fluids, + RV_Objects
			
			rq_first  1    // terrain, objects
			rq_last	  76   // RQG_Fluid too

			overlays	off
			// enable_forward_plus false
		}
	}
}

//  üèóÔ∏è ed rtt 3  cam preview  normal all
compositor_node Rtt_View
{
	in 0 rt_output

	target rt_output
	{
		pass render_scene
		{
			profiling_id "RTT 3 view all"
			identifier	11103

			load
			{
				all				clear
				clear_colour	0 0 0 1  // black
			}
			store
			{
				colour	store
				depth	store
				stencil	store
			}

			visibility_mask  0x000001FF  // normal
			rq_first  0
			rq_last	  199  // before RQ_OVERLAY

			overlays	off
			shadows		SR3_Shadows  //! rem-
			// todo: use that from code, not SR3_Shadows from here
		}
	}
}
//  end of  Editor only


//  üîÆ cube reflections
//------------------------------------------------------------------------------------
abstract target cubemap_target
{
	pass render_scene
	{
		profiling_id "Cube Reflection"
		identifier	33306

		load
		{
			all				clear
			// clear_colour	1 1 0 1  // test yellow
			clear_colour	0.2 0.4 0.8 1  // skyblue-
		}
		store
		{
			// colour	store
			depth			dont_care
			stencil			dont_care
		}

		expose cubemap

		visibility_mask  0x0000042D  // 1 rd 4 ter 8 vgt 20 obj  400 sky
		// visibility_mask  0x0000046D  // + 40 grass

		overlays		off
		camera_cubemap_reorient true
		// shadows		SR3_Shadows
		// ^ crashes ..
		// todo: use that from code, not SR3_Shadows from here
	}
}

compositor_node CubemapNode
{
	in 0 cubemap

	texture tmpCubemap target_width target_height target_format cubemap mipmaps 0

	target tmpCubemap +X : cubemap_target { }
	target tmpCubemap -X : cubemap_target { }
	target tmpCubemap +Y : cubemap_target { }
	target tmpCubemap -Y : cubemap_target { }
	target tmpCubemap +Z : cubemap_target { }
	target tmpCubemap -Z : cubemap_target { 
		pass ibl_specular
		{
			identifier	33111
			input tmpCubemap
			output cubemap
	}	}
}

//  not used
// MSAA Cubemaps do not exist. Therefore we have to manually define the RTV (RenderTextureView)
// To render to a temporary MSAA surface and tell Ogre to resolve the MSAA contents into a cubemap
compositor_node CubemapNodeMsaa
{
	in 0 cubemap

	// Note: IF you wish to preserve the MSAA contents of all 6 faces, then use
	//	'texture tmpMsaa target_width target_height 6 target_format 2d_array msaa 4 explicit_resolve'
	// instead
	texture tmpMsaa		target_width target_height target_format msaa 4 explicit_resolve
	texture tmpCubemap	target_width target_height target_format cubemap mipmaps 0

	rtv mixedCubemapRtv
	{
		// Specify we want to render to tmpMsaa at slot[0] but we want to resolve to tmpCubemap
		colour	0 tmpMsaa resolve tmpCubemap
	}

	target mixedCubemapRtv +X : cubemap_target { }
	target mixedCubemapRtv -X : cubemap_target { }
	target mixedCubemapRtv +Y : cubemap_target { }
	target mixedCubemapRtv -Y : cubemap_target { }
	target mixedCubemapRtv +Z : cubemap_target { }
	target mixedCubemapRtv -Z : cubemap_target {
		pass ibl_specular
		{
			identifier	33133
			input tmpCubemap
			output cubemap
	}	}
}


//------------------------------------------------------------------------------------
//  üèûÔ∏è  Main render  (üë• split screen)
//------------------------------------------------------------------------------------
compositor_node SR3_Render
{
	in 0 rt_renderwindow
	in 1 dynamic_cubemap

	target rt_renderwindow
	{
		pass clear
		{
			profiling_id "Clear all"
			identifier	22000

			//  executed on first view/eye
			execution_mask			0x01
			//  affected by modifier, apply to the whole screen
			viewport_modifier_mask	0x00

			//  Only write to MSAA surface, don't resolve, overlays legacy problem
			store
			{
				colour	store
				depth	store
				stencil	store
			}
			
			colour_value  0.02 0.015 0.03 1
		}

		//  view render  --------
		pass render_scene
		{
			profiling_id "Main view"
			identifier	22201

			//  executed in all views/eyes
			execution_mask			0xff
			//  affected by modifier, so renders to a portion of screen
			viewport_modifier_mask	0xff

			store
			{
				colour	store
				depth	store
				stencil	store
			}

			//  materials in this pass will be using this cubemap
			expose dynamic_cubemap

			//** set in code for game: RV_MaskGameAll, not ed
			visibility_mask  0x000011FF   // trail, sky main, all geom
			// rq_last		110  // glass,par etc

			overlays	on
			// shadows		SR3_Shadows
		}


		//  restore  ----  for Hud, split
		pass render_scene
		{
			profiling_id "HUD"
			identifier	22501

			// executed in all eyes, not views
			// execution_mask			0xff
			// executed on first view/eye
			execution_mask			0x01
			// affected by modifier, apply to the whole screen
			viewport_modifier_mask	0x00

			store
			{
				colour	store
				depth	store  //-
				stencil	store
			}
			visibility_mask  0x00002000  // RV_Hud

			rq_first	200
			rq_last		230

			overlays	off
		}


		// pass custom MYGUI
		// {
			// provider?   //** added in code
			// profiling_id "GUI"

			// executed in the second eye
			// execution_mask			0x02
			// apply to the whole screen
			// viewport_modifier_mask	0x00
			
			// rq_first	254
			// rq_last		255
			
			// overlays	on
		// }
	}
}


//  ü™û planar reflections  Water üåä fluids
//------------------------------------------------------------------------------------
compositor_node PlanarReflectNode
{
	in 0 rt_renderwindow

	target rt_renderwindow
	{
		pass render_scene
		{
			profiling_id "Planar Reflection"
			identifier 44001

			load
			{
				all				clear
				clear_colour	0.2 0.4 0.6 1
			}
			store
			{
				colour	store_or_resolve
				depth	dont_care
				stencil	dont_care
			}

			visibility_mask  0x0000022D  // 1 rd 4 ter 8 vgt 20 obj  200 sky
			overlays		 off
			//shadows  SR3_Shadows  // no-
		}

		pass generate_mipmaps
		{
			profiling_id "Planar Reflect Mipmaps"
			identifier 44201
		
			mipmap_method compute_hq
		}
	}
}

workspace PlanarReflections
{
	connect_output PlanarReflectNode 0
}


//  üåí shadows  - for ed prv cam .. // todo: drop this
//------------------------------------------------------------------------------------
compositor_node_shadow SR3_Shadows
{
	technique pssm

	texture atlas 3072 2048 PFG_D32_FLOAT

	num_splits		3
	pssm_lambda		0.95
	shadow_map 0 atlas uv 0.000000000000000 0.0 0.666666666666667 1.0 light 0 split 0
	shadow_map 1 atlas uv 0.666666666666667 0.0 0.333333333333333 0.5 light 0 split 1
	shadow_map 2 atlas uv 0.666666666666667 0.5 0.333333333333333 0.5 light 0 split 2

	target atlas
	{
		pass clear
		{
			colour_value 1 1 1 1
			identifier	77000
		}
	}

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass render_scene
			{
				profiling_id "Shadows unused"
				identifier	77877
			}
		}
	}
}


//  workspace
//------------------------------------------------------------------------------------
workspace SR3_Workspace
{
	// Render Window  on channel #0
	connect_external 0 SR3_Render 0
	// Cubemap  on channel #1
	connect_external 1 SR3_Render 1
}
