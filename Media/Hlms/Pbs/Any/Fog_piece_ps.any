
#include "/media/matias/Datos/SyntaxHighlightingMisc.h"

    ///_ calculate fog  * OLD *
    // float fogDepth = shSaturate((depth - fogParams.y) * fogParams.w);  // w = 1 / (max - min)
    // float fogDepthH = shSaturate((depth - fogParamsH.z) * fogParamsH.w);

    // float fogDir = dot( normalize(eyeDir.xz), normalize(lightDir.xz) ) * 0.5 + 0.5;
    // float fogH = shSaturate( (fogParamsH.x/*h*/ - worldPosY) * fogParamsH.y/*dens*/);

    // float4 fogClrDir = shLerp( fogColorAway, fogColorSun, fogDir);
    // float4 fogClrFinal = shLerp( fogClrDir, fogColorH, fogH);
    // float fogL = shLerp( fogDepth * fogClrDir.a, fogDepthH * fogColorH.a, fogH);

    // /// fluid fog
    // float flDepth = shSaturate(depth * fogFluidH.y);
    // float flH = shSaturate((fogFluidH.x/*h*/ - worldPosY) * fogFluidH.z);
    // float4 flClrFinal = shLerp( fogClrFinal, fogFluidClr, flH);
    // float flL = shLerp( fogL, flDepth /* * fogFluidClr.a*/, flH);

    // shOutputColour(0).xyz = shLerp( shOutputColour(0).xyz, flClrFinal.rgb, flL);
    ///_

@piece( applyFog )
    @property( hlms_fog && !emissive_map )
    //property( hlms_fog )
        // todo if emissive_map allow hfog on sky

        const float distToCameraH = length( inPs.pos.xyz );

        //**  height fog  first
        midf fogHWeight = midf_c( exp2( -distToCameraH * atmo.fogHparams.z ) );
        const midf heightMul = saturate( ( inPs.worldH - atmo.fogHparams.x ) * atmo.fogHparams.y );  // amount H
        const midf3 fogHclr = lerp( lerp( finalColour.xyz,
                                        atmo.fogHcolor.xyz,
                                        atmo.fogHcolor.w),
                                    finalColour.xyz,
                                    fogHWeight );
        finalColour.xyz = lerp( fogHclr, finalColour.xyz, heightMul );
    //end
    //property( hlms_fog && !emissive_map )
        //  distance fog
        const midf luminance = dot( finalColour.xyz, midf3_c( _h(0.212655), _h(0.715158), _h(0.072187) ) );
        const midf lumFogWeight = max( exp2(
            atmo.fogBreakFalloff * luminance + atmo.fogBreakMinBrightness ), _h(0.0) );
        
        const float distToCamera = max( _h(0.0), distToCameraH - atmo.fogStartDistance );
        midf fogWeight = midf_c( exp2( -distToCamera * atmo.fogDensity ) );  // amount
        fogWeight = lerp( _h(1.0), fogWeight, lumFogWeight );
        
        // todo: fix fog dir looking down..
        finalColour.xyz = lerp( inPs.fog.xyz, finalColour.xyz, fogWeight );  // atmo orig
    	const midf3 camPosW = midf3_c( passBuf.view[3][0], passBuf.view[3][1], passBuf.view[3][2] );
        const midf3 eyeDir = normalize(camPosW - inPs.pos.xyz);
		//- float3 eyeDir = normalize(camPosObjSpace.xyz - posObjSpace.xyz);

       	@property( hlms_lights_directional )
            midf3 lightDirW = light0Buf.lights[0].position.xyz;
        @else
            midf3 lightDirW = midf3_c(1,0,0);
        @end
        float fogDir = dot( normalize(eyeDir.xz), normalize(lightDirW.xz) ) * _h(0.5) + _h(0.5);
                                    //   #define p_sunDir	midf3_c( atmo.packedParams2.xyz )
        // float fogDir = dot( pixelData.viewDir.xz, midf2_c( atmo.packedParams2.xy ) ) * 0.5 + 0.5;  // bad screen space-

        midf4 fogColour = lerp( atmo.fogColourSun,
                                atmo.fogColourAway,
                                fogDir );
        finalColour.xyz =
            //camPosW * 10.0 + 0.001 *  // test
            lerp( fogColour.xyz,
                  finalColour.xyz,
                  fogWeight );
                //fogWeight * fogColour.w );  // todo: transparency

        // const midf fogHin = saturate( ( atmo.cameraDisplacement.y - atmo.fogHparams.x ) * atmo.fogHparams.y );
        // midf fogHinWeight = midf_c( exp2( -fogHin * atmo.fogHparams.z ) );
        // finalColour.xyz = lerp( atmo.fogHcolor.xyz, finalColour.xyz, fogHinWeight );
    @end
@end
