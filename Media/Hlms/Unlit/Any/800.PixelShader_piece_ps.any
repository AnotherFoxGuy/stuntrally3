
#include "/media/matias/Datos/SyntaxHighlightingMisc.h"

@piece( DefaultHeaderPS )
	@foreach( diffuse_map, n )
		#define DiffuseSampler@n samplerState@value(diffuse_map@n_sampler)
		@property( diffuse_map@n_array )
			#define SampleDiffuse@n( tex, sampler, uv, d ) OGRE_SampleArray2DF16( tex, sampler, uv, d )
			#define DiffuseTexture@n textureMapsArray@value(diffuse_map@n_idx)
			@piece( diffuseIdx@n ), diffuseIdx@n@end
		@else
			#define SampleDiffuse@n( tex, sampler, uv ) OGRE_SampleF16( tex, sampler, uv )
			#define DiffuseTexture@n textureMaps@value(diffuse_map@n_idx)
		@end

		@property( !diffuse_map@n_reflection )
			#define DiffuseUV@n inPs.uv@value( uv_diffuse@n ).@insertpiece( uv_diffuse_swizzle@n )
		@else
			@property( hlms_forwardplus_flipY || syntax != glsl )
				#define DiffuseUV@n gl_FragCoord.xy * passBuf.invWindowSize.xy
			@else
				#define DiffuseUV@n float2( gl_FragCoord.x * passBuf.invWindowSize.x, 1.0f - gl_FragCoord.y * passBuf.invWindowSize.y )
			@end
		@end
	@end

	// START UNIFORM DECLARATION
	@property( has_planar_reflections || hlms_shadowcaster_point )
		@insertpiece( PassStructDecl )
	@end
	@property( !hlms_shadowcaster || alpha_test )
		@insertpiece( MaterialStructDecl )
		@insertpiece( InstanceStructDecl )
	@end
	@insertpiece( custom_ps_uniformStructDeclaration )
	// END UNIFORM DECLARATION
@end

//-----------------------------------------------------------------------------
//		BODY CODE
//-----------------------------------------------------------------------------

@piece( LoadMaterial )
	@property( !lower_gpu_overhead )
		@property( syntax != metal )
			ushort materialId	= worldMaterialIdx[inPs.drawId].x & 0x1FFu;
			#define material materialArray[materialId]
		@else
			#define material materialArray[inPs.materialId]
		@end
	@else
		#define material materialArray[0]
	@end
@end

@piece( DefaultBodyPS )
	midf4 diffuseCol = midf4_c( 1.0f, 1.0f, 1.0f, 1.0f );

	@property( diffuse_map || alpha_test || diffuse )
		@insertpiece( LoadMaterial )
	@end

	@insertpiece( custom_ps_posMaterialLoad )

	// Decode diffuse indices (for array textures)
	@property( syntax != metal )
		@property( diffuse_map0 )ushort diffuseIdx0 = material.indices0_3.x & 0x0000FFFFu;@end
		@property( diffuse_map1 )ushort diffuseIdx1 = material.indices0_3.x >> 16u;@end
		@property( diffuse_map2 )ushort diffuseIdx2 = material.indices0_3.y & 0x0000FFFFu;@end
		@property( diffuse_map3 )ushort diffuseIdx3 = material.indices0_3.y >> 16u;@end
		@property( diffuse_map4 )ushort diffuseIdx4 = material.indices0_3.z & 0x0000FFFFu;@end
		@property( diffuse_map5 )ushort diffuseIdx5 = material.indices0_3.z >> 16u;@end
		@property( diffuse_map6 )ushort diffuseIdx6 = material.indices0_3.w & 0x0000FFFFu;@end
		@property( diffuse_map7 )ushort diffuseIdx7 = material.indices0_3.w >> 16u;@end
	@else
		@foreach( diffuse_map, n )
			ushort diffuseIdx@n = material.diffuseIdx@n;@end
	@end

	@property( diffuse_map0 )
		// Load base image
		diffuseCol = SampleDiffuse0( DiffuseTexture0, DiffuseSampler0,
									 DiffuseUV0 @insertpiece( diffuseIdx0 ) ).@insertpiece(diffuse_map0_tex_swizzle);
	@end

	// Load each additional layer and blend it
	@foreach( diffuse_map, n, 1 )
		@property( diffuse_map@n )
			midf4 topImage@n = SampleDiffuse@n( DiffuseTexture@n, DiffuseSampler@n,
												DiffuseUV@n @insertpiece( diffuseIdx@n ) ).@insertpiece(diffuse_map@n_tex_swizzle);
			@insertpiece( blend_mode_idx@n )
		@end
	@end

	// Apply material colour
	@property( hlms_colour )
		diffuseCol *= inPs.colour;
	@else
		@property( diffuse )
			diffuseCol *= midf4_c( material.diffuse );
		@end
	@end


//  ED RTT road  ------------
	@property( ed_RoadDens )
		// diffuseCol = midf4_c(1.0 - diffuseCol.w, 0.0, 0.0, 1.0);  //-?
		diffuseCol = midf4_c(diffuseCol.x, 0.0, 0.0, 1.0);
	@end
	
	@property( ed_RoadPreview )

		float bridge = diffuseCol.x, pipe = diffuseCol.y;
		float norm = diffuseCol.z;

		float onP = pipe > 0.5 ? 1.0 : 0.0;  // get onP from pipe
		pipe = pipe > 0.5 ? min(1.0, (pipe - 0.5) * 3.5) : pipe * 2.0;
														//\par
		float pwr = lerp(lerp(8.0, 8.0, bridge), 4.0, pipe);
		float ter = lerp(lerp(1.0, 0.0, bridge), 0.0, pipe);
		float clrLi = 1.0 - lerp( 1.0-lerp(pow(norm, pwr), pow(norm, pwr), pipe),
			pow(1.0 - 2.0*acos(norm)/3.141592654, pwr), ter);
		// float clrLi = ambient + diffuse * matDif.rgb;
		
		///  color  for minimap preview  ---~~~====~~~---
		float3 clr =
			lerp(
				lerp(float3(1.0, 1.0, 1.0) * (0.0 + 0.7*clrLi),  // gray
					 float3(0.0, 0.8, 1.0) * (0.4 + 0.7*clrLi)   // cyan
					,bridge),
				lerp(float3(1.0, 0.8, 0.0),                           // yellow
					 float3(1.0, 0.4, 0.0), onP) * (0.2 + 0.8*clrLi)  // orange
			,pipe);
			
		diffuseCol = midf4_c(pow(clr.rgb, midf3_c(2.f, 2.f, 2.f)), 1.0);
		// diffuseCol = midf4_c(clr.rgb, 1.0);
	@end
//  ED RTT  ------------


	//**  gamma  --
	// diffuseCol.xyz = pow(diffuseCol.xyz, midf3_c(1.1f, 1.1f, 1.1f));

	@insertpiece( custom_ps_preLights )

	@property( alpha_test && (!alpha_test_shadow_caster_only || hlms_shadowcaster) )
		if( material.alpha_test_threshold.x @insertpiece( alpha_test_cmp_func ) diffuseCol.w )
			discard;
	@end

	@property( !hlms_shadowcaster )
		outPs_colour0 = diffuseCol;
	@end
@end
